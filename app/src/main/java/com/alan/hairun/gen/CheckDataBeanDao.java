package com.alan.hairun.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.alan.hairun.takephoapp.bean.CheckDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_DATA_BEAN".
*/
public class CheckDataBeanDao extends AbstractDao<CheckDataBean, Long> {

    public static final String TABLENAME = "CHECK_DATA_BEAN";

    /**
     * Properties of entity CheckDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BitName = new Property(1, String.class, "bitName", false, "BIT_NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property ProjectName = new Property(3, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property Standard = new Property(4, String.class, "standard", false, "STANDARD");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property PlanNum = new Property(6, String.class, "planNum", false, "PLAN_NUM");
        public final static Property One = new Property(7, String.class, "one", false, "ONE");
        public final static Property Two = new Property(8, String.class, "two", false, "TWO");
        public final static Property Three = new Property(9, String.class, "three", false, "THREE");
    }


    public CheckDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CheckDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BIT_NAME\" TEXT," + // 1: bitName
                "\"TYPE\" TEXT," + // 2: type
                "\"PROJECT_NAME\" TEXT," + // 3: projectName
                "\"STANDARD\" TEXT," + // 4: standard
                "\"UNIT\" TEXT," + // 5: unit
                "\"PLAN_NUM\" TEXT," + // 6: planNum
                "\"ONE\" TEXT," + // 7: one
                "\"TWO\" TEXT," + // 8: two
                "\"THREE\" TEXT);"); // 9: three
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bitName = entity.getBitName();
        if (bitName != null) {
            stmt.bindString(2, bitName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(4, projectName);
        }
 
        String standard = entity.getStandard();
        if (standard != null) {
            stmt.bindString(5, standard);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String planNum = entity.getPlanNum();
        if (planNum != null) {
            stmt.bindString(7, planNum);
        }
 
        String one = entity.getOne();
        if (one != null) {
            stmt.bindString(8, one);
        }
 
        String two = entity.getTwo();
        if (two != null) {
            stmt.bindString(9, two);
        }
 
        String three = entity.getThree();
        if (three != null) {
            stmt.bindString(10, three);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bitName = entity.getBitName();
        if (bitName != null) {
            stmt.bindString(2, bitName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(4, projectName);
        }
 
        String standard = entity.getStandard();
        if (standard != null) {
            stmt.bindString(5, standard);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String planNum = entity.getPlanNum();
        if (planNum != null) {
            stmt.bindString(7, planNum);
        }
 
        String one = entity.getOne();
        if (one != null) {
            stmt.bindString(8, one);
        }
 
        String two = entity.getTwo();
        if (two != null) {
            stmt.bindString(9, two);
        }
 
        String three = entity.getThree();
        if (three != null) {
            stmt.bindString(10, three);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckDataBean readEntity(Cursor cursor, int offset) {
        CheckDataBean entity = new CheckDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bitName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // projectName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // standard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // planNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // one
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // two
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // three
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBitName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStandard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlanNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOne(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTwo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setThree(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
